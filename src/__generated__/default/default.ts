/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * STRV Testproject API
 * This is the backend to be used when working on test projects for STRV, specifically web development.
 */
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type {
  RefreshTokenAuthentication200,
  RefreshTokenAuthenticationBody,
  CreateAnEvent201,
  CreateAnEventBodyBody,
  GetASpecificEvent200,
  UpdateAnEvent200,
  AttendAnEvent200,
  UnattendAnEvent200,
  RegisterANewUser201,
  RegisterANewUserBody,
} from "../sTRVTestprojectAPI.schemas";
import { customInstance } from "../../api/client";

/**
 * @summary Refresh Token authentication
 */
export const refreshTokenAuthentication = (
  refreshTokenAuthenticationBody: RefreshTokenAuthenticationBody
) => {
  return customInstance<RefreshTokenAuthentication200>({
    url: `/auth/native`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: refreshTokenAuthenticationBody,
  });
};

export type RefreshTokenAuthenticationMutationResult = NonNullable<
  Awaited<ReturnType<typeof refreshTokenAuthentication>>
>;
export type RefreshTokenAuthenticationMutationBody =
  RefreshTokenAuthenticationBody;
export type RefreshTokenAuthenticationMutationError = unknown;

export const useRefreshTokenAuthentication = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refreshTokenAuthentication>>,
    TError,
    { data: RefreshTokenAuthenticationBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof refreshTokenAuthentication>>,
    { data: RefreshTokenAuthenticationBody }
  > = (props) => {
    const { data } = props ?? {};

    return refreshTokenAuthentication(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof refreshTokenAuthentication>>,
    TError,
    { data: RefreshTokenAuthenticationBody },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary List all events
 */
export const listAllEvents = () => {
  return customInstance<unknown[]>({ url: `/events`, method: "get" });
};

export const getListAllEventsQueryKey = () => [`/events`];

export type ListAllEventsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listAllEvents>>
>;
export type ListAllEventsQueryError = unknown;

export const useListAllEvents = <
  TData = Awaited<ReturnType<typeof listAllEvents>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof listAllEvents>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListAllEventsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listAllEvents>>
  > = () => listAllEvents();

  const query = useQuery<
    Awaited<ReturnType<typeof listAllEvents>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Create an event
 */
export const createAnEvent = (createAnEventBodyBody: CreateAnEventBodyBody) => {
  return customInstance<CreateAnEvent201>({
    url: `/events`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: createAnEventBodyBody,
  });
};

export type CreateAnEventMutationResult = NonNullable<
  Awaited<ReturnType<typeof createAnEvent>>
>;
export type CreateAnEventMutationBody = CreateAnEventBodyBody;
export type CreateAnEventMutationError = unknown;

export const useCreateAnEvent = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAnEvent>>,
    TError,
    { data: CreateAnEventBodyBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createAnEvent>>,
    { data: CreateAnEventBodyBody }
  > = (props) => {
    const { data } = props ?? {};

    return createAnEvent(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof createAnEvent>>,
    TError,
    { data: CreateAnEventBodyBody },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Get a specific event
 */
export const getASpecificEvent = (id: string) => {
  return customInstance<GetASpecificEvent200>({
    url: `/events/${id}`,
    method: "get",
  });
};

export const getGetASpecificEventQueryKey = (id: string) => [`/events/${id}`];

export type GetASpecificEventQueryResult = NonNullable<
  Awaited<ReturnType<typeof getASpecificEvent>>
>;
export type GetASpecificEventQueryError = unknown;

export const useGetASpecificEvent = <
  TData = Awaited<ReturnType<typeof getASpecificEvent>>,
  TError = unknown
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getASpecificEvent>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetASpecificEventQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getASpecificEvent>>
  > = () => getASpecificEvent(id);

  const query = useQuery<
    Awaited<ReturnType<typeof getASpecificEvent>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * Update some properties on the event.

This uses patch semantics, so only supply the properties you wish to change, otherwise the request might be rejected due to some fields being read-only.
 * @summary Update an event
 */
export const updateAnEvent = (
  id: string,
  createAnEventBodyBody: CreateAnEventBodyBody
) => {
  return customInstance<UpdateAnEvent200>({
    url: `/events/${id}`,
    method: "patch",
    headers: { "Content-Type": "application/json" },
    data: createAnEventBodyBody,
  });
};

export type UpdateAnEventMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateAnEvent>>
>;
export type UpdateAnEventMutationBody = CreateAnEventBodyBody;
export type UpdateAnEventMutationError = unknown;

export const useUpdateAnEvent = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAnEvent>>,
    TError,
    { id: string; data: CreateAnEventBodyBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateAnEvent>>,
    { id: string; data: CreateAnEventBodyBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateAnEvent(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof updateAnEvent>>,
    TError,
    { id: string; data: CreateAnEventBodyBody },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * Removes the event from database.

Only the event's owner can do this.
 * @summary Delete an event
 */
export const deleteAnEvent = (id: string) => {
  return customInstance<void>({ url: `/events/${id}`, method: "delete" });
};

export type DeleteAnEventMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteAnEvent>>
>;

export type DeleteAnEventMutationError = unknown;

export const useDeleteAnEvent = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAnEvent>>,
    TError,
    { id: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteAnEvent>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteAnEvent(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteAnEvent>>,
    TError,
    { id: string },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * Make yourself an attendee of the event.
 * @summary Attend an event
 */
export const attendAnEvent = (id: string) => {
  return customInstance<AttendAnEvent200>({
    url: `/events/${id}/attendees/me`,
    method: "post",
  });
};

export type AttendAnEventMutationResult = NonNullable<
  Awaited<ReturnType<typeof attendAnEvent>>
>;

export type AttendAnEventMutationError = unknown;

export const useAttendAnEvent = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof attendAnEvent>>,
    TError,
    { id: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof attendAnEvent>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return attendAnEvent(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof attendAnEvent>>,
    TError,
    { id: string },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * Remove yourself from the list of attendees.
 * @summary Unattend an event
 */
export const unattendAnEvent = (id: string) => {
  return customInstance<UnattendAnEvent200>({
    url: `/events/${id}/attendees/me`,
    method: "delete",
  });
};

export type UnattendAnEventMutationResult = NonNullable<
  Awaited<ReturnType<typeof unattendAnEvent>>
>;

export type UnattendAnEventMutationError = unknown;

export const useUnattendAnEvent = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof unattendAnEvent>>,
    TError,
    { id: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof unattendAnEvent>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return unattendAnEvent(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof unattendAnEvent>>,
    TError,
    { id: string },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Register a new user
 */
export const registerANewUser = (
  registerANewUserBody: RegisterANewUserBody
) => {
  return customInstance<RegisterANewUser201>({
    url: `/users`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: registerANewUserBody,
  });
};

export type RegisterANewUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof registerANewUser>>
>;
export type RegisterANewUserMutationBody = RegisterANewUserBody;
export type RegisterANewUserMutationError = unknown;

export const useRegisterANewUser = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerANewUser>>,
    TError,
    { data: RegisterANewUserBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof registerANewUser>>,
    { data: RegisterANewUserBody }
  > = (props) => {
    const { data } = props ?? {};

    return registerANewUser(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof registerANewUser>>,
    TError,
    { data: RegisterANewUserBody },
    TContext
  >(mutationFn, mutationOptions);
};
