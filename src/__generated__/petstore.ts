/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * Swagger Petstore
 * A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import { customInstance } from "../api/client";
export interface Pet {
  id: number;
  name: string;
  tag?: string;
}

/**
 * Returns all pets from the system that the user has access to
 */
export const getPets = () => {
  return customInstance<Pet[]>({ url: `/pets`, method: "get" });
};

export const getGetPetsQueryKey = () => [`/pets`];

export type GetPetsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPets>>
>;
export type GetPetsQueryError = unknown;

export const useGetPets = <
  TData = Awaited<ReturnType<typeof getPets>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getPets>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPetsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPets>>> = () =>
    getPets();

  const query = useQuery<Awaited<ReturnType<typeof getPets>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
